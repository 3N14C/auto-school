// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id String @id @default(cuid())

  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum Role {
  USER
  ADMIN
}

model User {
  id String @id @default(cuid())

  email      String @unique
  name       String
  phone      String @unique
  password   String
  driveHours Int    @default(0)
  role       Role   @default(USER)

  sessions Session[]

  instructor    Instructor?  @relation(fields: [instructorId], references: [id])
  instructorId  String?
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId String?
}

enum ApplicationStatus {
  PENDING
  APPROVED
}

model Application {
  id String @id @default(cuid())

  email             String            @unique
  name              String
  phone             String            @unique
  applicationStatus ApplicationStatus @default(PENDING)
  user              User[]
}

model Car {
  id String @id @default(cuid())

  brand String
  model String @unique

  img        String?
  instructor Instructor?
}

model Instructor {
  id String @id @default(cuid())

  firstName String
  lastName  String
  img       String?

  car         Car           @relation(fields: [carId], references: [id])
  carId       String        @unique
  user        User[]
  reservation Reservation[]
}

enum LessonPlace {
  AUTODROME
  CITY
}

enum LessonStatus {
  PENDING
  COMPLETED
}

model Lesson {
  id String @id @default(cuid())

  date   DateTime
  time   String
  place  LessonPlace  @default(AUTODROME)
  status LessonStatus @default(PENDING)

  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId String?
}

model Reservation {
  id String @id @default(cuid())

  lessons      Lesson[]
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId String
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String
  user         User[]
}

model Category {
  id String @id @default(cuid())

  name        String
  reservation Reservation[]
}
